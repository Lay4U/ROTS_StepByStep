Imprint logo
Journal logo
Deep learning with long short-term memory networks for .nancial market predictions 
Thomas Fischer 1 , ., Christopher Krauss 1 
Department of Statistics and Econometrics, University of Erlangen-Nurnberg, Lange Gasse 20, 90403 Nurnberg, Germany 
a r t i c l e i n f o Article history: Received 12 May 2017 Accepted 27 November 2017 Available online 5 December 2017 Keywords: Finance Statistical arbitrage LSTM Machine learning Deep learning 
a b s t r a c t Long short-term memory (LSTM) networks are a state-of-the-art technique for sequence learning. They are less commonly applied to .nancial time series predictions, yet inherently suitable for this domain. We deploy LSTM networks for predicting out-of-sample directional movements for the constituent stocks of the S&P 500 from 1992 until 2015. With daily returns of 0.46 percent and a Sharpe ratio of 5.8 prior to transaction costs, we .nd LSTM networks to outperform memory-free classi.cation methods, i.e., a ran- dom forest (RAF), a deep neural net (DNN), and a logistic regression classi.er (LOG). The outperformance relative to the general market is very clear from 1992 to 2009, but as of 2010, excess returns seem to have been arbitraged away with LSTM pro.tability .uctuating around zero after transaction costs. We further unveil sources of pro.tability, thereby shedding light into the black box of arti.cial neural net- works. Speci.cally, we .nd one common pattern among the stocks selected for trading .they exhibit high volatility and a short-term reversal return pro.le. Leveraging these .ndings, we are able to formal- ize a rules-based short-term reversal strategy that yields 0.23 percent prior to transaction costs. Further regression analysis unveils low exposure of the LSTM returns to common sources of systematic risk .also compared to the three benchmark models. ¨Ï2017 Elsevier B.V. All rights reserved. 
1. 
Introduction 
Prediction tasks on .nancial time series are notoriously di.- cult, primarily driven by the high degree of noise and the gener- ally accepted, semi-strong form of market e.ciency ( Fama, 1970 ). Yet, there is a plethora of well-known capital market anomalies that are in stark contrast with the notion of market e.ciency. For example, Jacobs (2015) or Green, Hand, and Zhang (2013) provide surveys comprising more than 100 of such capital market anoma- lies, which effectively rely on return predictive signals to outper- form the market. However, the .nancial models used to establish a relationship between these return predictive signals, (the features) and future returns (the targets), are usually transparent in nature and not able to capture complex non-linear dependencies. In the last years, initial evidence has been established that machine learning techniques are capable of identifying (non- linear) structures in .nancial market data, see Huck (2009, 2010) , 
Takeuchi and Lee (2013) , Moritz and Zimmermann (2014) , Dixon, Klabjan, and Bang (2015) , and further references in Atsalakis and Valavanis (2009) as well as Sermpinis, Theo.latos, Karathana- sopoulos, Georgopoulos, and Dunis (2013) . Speci.cally, we expand on the recent work of Krauss, Do, and Huck (2017) on the same data sample for the sake of comparability. The authors use deep learning, random forests, gradient-boosted trees, and different en- sembles as forecasting methods on all S&P 500 constituents from 1992 to 2015. One key .nding is that deep neural networks with returns of 0.33 percent per day prior to transaction costs underper- form gradient-boosted trees with 0.37 percent and random forests with 0.43 percent. The latter fact is surprising, given that deep learning has ¡°dramatically improved the state-of-the-art in speech recognition, visual object recognition, object detection and many other domains¡±( LeCun, Bengio, and Hinton, 2015 , p. 436). At .rst sight, we would expect similar improvements in the domain of time series predictions. However, Krauss et al. (2017 , p. 695) point out that ¡°neural networks are notoriously di.cult to train¡±and that it ¡°may well be that there are con.gurations in parameter space to further improve the performance¡±of deep learning. In this paper, we primarily focus on deep learning, and on fur- ther exploring its potential in a large-scale time series prediction problem. In this respect, we make three contributions to the liter- ature. 
.First, we focus on long short-term memory (LSTM) networks, one of the most advanced deep learning architectures for se- quence learning tasks, such as handwriting recognition, speech recognition, or time series prediction ( Graves et al., 2009; Graves, Mohamed, & Hinton, 2013; Hochreiter & Schmidhuber, 1997; Schmidhuber, 2015 ). Surprisingly, to our knowledge, there has been no previous attempt to deploy LSTM networks on a large, liquid, and survivor bias free stock universe to assess its performance in large-scale .nancial market prediction tasks. Selected applications, as in Xiong, Nichols, and Shen (2015) , fo- cus on predicting the volatility of the S&P 500, on forecasting a small sample of foreign exchange rates ( Giles, Lawrence, & Tsoi, 2001 ), or on assessing the impact of incorporating news for speci.c companies ( Siah and Myers (2016) ). We .ll this void and apply LSTM networks to all S&P 500 constituents from 1992 until 2015. Hereby, we provide an in-depth guide on data preprocessing, as well as development, training, and de- ployment of LSTM networks for .nancial time series prediction tasks. Last but not least, we contrast our .ndings to selected benchmarks from the literature .a random forest (the best performing benchmark), a standard deep neural net (to show the value-add of the LSTM architecture), and a standard logis- tic regression (to establish a baseline). The LSTM network out- performs the memory-free methods with statistically and eco- nomically signi.cant returns of 0.46 percent per day .com- pared to 0.43 percent for the RAF, 0.32 percent for the stan- dard DNN, and 0.26 percent for the logistic regression. This rel- ative advantage also holds true with regard to predictional ac- curacy where a Diebold.Mariano test con.rms superior fore- casts of the LSTM networks compared to the applied bench- marks. Our .ndings are largely robust to microstructural effects. Speci.cally, when we implement the LSTM strategy on volume- weighted-average-prices (VWAPs) instead of closing prices, we see a decline in pro.tability, but the results are still statistically and economically signi.cant. The same holds true for a weekly implementation with lower turnover .even after introducing a one-day-waiting rule after the signal. Only as of 2010, the edge of the LSTM seems to have been arbitraged away, with LSTM pro.tability .uctuating around zero after transaction costs, and RAF pro.tability dipping strictly into the negative domain. .Second, we aim at shedding light into the black box of arti.- cial neural networks .thereby unveiling sources of pro.tability. Generally, we .nd that stocks selected for trading exhibit high volatility, below-mean momentum, extremal directional move- ments in the last days prior to trading, and a tendency for re- versing these extremal movements in the near-term future. .Third, we synthesize the .ndings of the latter part into a sim- pli.ed, rules-based trading strategy that aims at capturing the 
quintessence of the patterns the LSTM acts upon for selecting winning and losing stocks. A strategy that buys short-term ex- tremal losers and sells short-term extremal winners leads to daily returns of 0.23 percent prior to transaction costs .so only about 50 percent of the LSTM returns. Regression analyses on systematic risk factors unveil a remaining alpha of 0.42 percent of the LSTM prior to transaction costs and generally lower ex- posure to common sources of systematic risk, compared to the benchmark models. The remainder of this paper is organized as follows. Section 2 brie.y covers the data sample, software packages, and hardware. Section 3 provides an in-depth discussion of our methodology, i.e., the generation of training and trading sets, the construction of input sequences, the model architecture and train- ing as well as the forecasting and trading steps. Section 4 presents the results and discusses our most relevant .ndings in light of the existing literature. Finally, Section 5 concludes. 2. 
Data, software, hardware 
2.1. Data 
For the empirical application, we use the S&P 500 index con- stituents from Thomson Reuters. For eliminating survivor bias, we .rst obtain all month end constituent lists for the S&P 500 from Thomson Reuters from December 1989 to September 2015. We consolidate these lists into one binary matrix, indicating whether the stock is an index constituent in the subsequent month. As such, we are able to approximately reproduce the S&P 500 at any given point in time between December 1989 and September 2015. In a second step, for all stocks having ever been a constituent of the index during that time frame, we download daily total return in- dices from January 1990 until October 2015. Return indices are cum-dividend prices and account for all relevant corporate actions and stock splits, making them the most adequate metric for return computations. Following Clegg and Krauss (2018) , we report aver- age summary statistics in Table 1 , split by industry sector. They are based on equal-weighted portfolios per sector, generated monthly, and constrained to index constituency of the S&P 500. 
2.2. Software and hardware 
Data preparation and handling is entirely conducted in Python 3.5 ( Python Software Foundation, 2016 ), relying on the packages numpy ( Van Der Walt, Colbert, & Varoquaux, 2011 ) and pandas ( McKinney, 2010 ). Our deep learning LSTM networks are devel- oped with keras ( Chollet, 2016 ) on top of Google TensorFlow, a 
powerful library for large-scale machine learning on heterogenous systems ( Abadi et al., 2015 ). Moreover, we make use of sci-kit learn ( Pedregosa et al., 2011 ) for the random forest and logistic regres- sion models and of H2O ( H2O, 2016 ) for the standard deep net. For performance evaluation, we revert to R, a programming language for statistical computing ( R Core Team, 2016 ) and the package Per- formanceAnalytics by Peterson and Carl (2014) . The LSTM network is trained on NVIDIA GPUs, all other models are trained on a CPU cluster. 3. 
Methodology 
Our methodology consists of .ve steps. First, we split our raw data in study periods, composed of training sets (for in-sample training) and trading sets (for out-of-sample predictions). Second, we discuss the feature space and targets necessary for training and making predictions. Third, we provide an in-depth discussion of LSTM networks. Fourth, we brie.y describe random forests, the deep net, and the logistic regression model we apply. Fifth, we de- velop the trading approach. The rest of this section follows the .ve step logic outlined above. 
3.1. Generation of training and trading sets 
Following Krauss et al. (2017) , we de.ne a ¡°study period¡±as a training-trading set, consisting of a training period of 750 days (ap- proximately three years) and a trading period of 250 days (approxi- mately one year). We split our entire data set from 1990 until 2015 in 23 of these study periods with non-overlapping trading periods. In other words, the study periods are rolling blocks of 10 0 0 days. Training is done with rolling windows on the .rst 750 days, i.e., by rolling a look back input of 240 days (corresponding to the max- imum feature length, see Section 3.2 ) across the block, and then predicting one day ahead. Trading is performed with the trained parameters on the last 250 days fully out-of-sample. Then, the en- tire system is rolled forward by 250 days .resulting in a total of 23 non-overlapping trading periods. Let n i denote the number of stocks that are a S&P 500 con- stituent at the very last day of the training period in study period i , so n i is very close to 500. 2 For the training set, we consider all n i stocks with the history they have available. Some stocks exhibit a full 750 day training his- tory, some only a subset of this time frame, for example, when they are listed at a later stage. The trading set is also composed of all n i stocks. If a constituent exhibits no price data after a certain day within the trading period, it is considered for trading up until that day. 3 
3.2. Feature and target generation 
3.2.1. Features .return sequences for LSTM networks Let P s = P s t t¡ô T be de.ned as the price process of stock s at time t , with s ¡ô { 1 , . . . , n i } and R m,s t the simple return for a stock s over m periods, i.e., R m,s t = P s t P s t.m .1 . (1) For the LSTM networks, we .rst calculate one-day ( m = 1 ) returns R 1 ,s t for each day t and each stock s , and stack them in one large 
feature vector V of dimension n i ¡¿T study , where T study denotes the number of days in the study period. Then, we standardize the re- turns by subtracting the mean ( ¥ìm train ) and dividing them by the standard deviation ( ¥òm train ) obtained from the training set: 4 . R m,s t = R m,s t .¥ìm train ¥òm train . (2) LSTM networks require sequences of input features for training, i.e., the values of the features at consecutive points in time. Our single feature is the standardized one-day return . R 1 ,s t . We opt for a sequence length of 240, thus comprising the information of ap- proximately one trading year. Hence, we generate overlapping se- quences of 240 consecutive, standardized one-day returns . R 1 ,s t in the following way: .rst, we sort the feature vector V by stock s and date t in ascending order. Then, we construct sequences of the form { . R 1 ,s t.239 , . R 1 ,s t.238 , . . . , . R 1 ,s t } for each stock s and each t ¡Ã240 of the study period. For the .rst stock s 1 the sequence hence consists of the standardized one-day returns { . R 1 ,s 1 1 , . R 1 ,s 1 2 , . . . , . R 1 ,s 1 240 } . The sec- ond sequence consists of { . R 1 ,s 1 2 , . R 1 ,s 1 3 , . . . , . R 1 ,s 1 241 } and so forth. An il- lustration is provided in Fig. 1 . In total, each study period consists of approximately 380,0 0 0 of those sequences of which approxi- mately 255,0 0 0 are used for in-sample training and approximately 125,0 0 0 are used for out-of-sample predictions. 5 3.2.2. Targets For the sake of comparability, we follow Takeuchi and Lee (2013) and de.neabinaryclassi.cation problem, i.e., theresponse variable Y s t+1 for each stock s and date t can take on two different values. To de.ne the two classes, we order all one-period returns R 1 ,s t+1 of all stocks s in period t + 1 in ascending order and cut them into two equally sized classes. Class 0 is realized if the one-period return R 1 ,s t+1 of stock s is smaller than the cross-sectional median re- turn of all stocks in period t + 1 . Similarly, class 1 is realized if the one-period return of s is larger than or equal to the cross-sectional median. 
3.3. LSTM networks 
The description of LSTM networks follows Graves (2013) , Olah (2015) , and Chollet (2016) . Valuable additional introductions can be found in Karpathy (2015) and Britz (2015) , providing step-by-step graphical walkthroughs and code snippets. LSTM networks belong to the class of recurrent neural networks (RNNs), i.e., neural networks whose ¡°underlying topology of inter- neuronal connections contains at least one cycle¡±( Medsker, 20 0 0 , p. 82). They have been introduced by Hochreiter and Schmidhu- ber (1997) and were further re.ned in the following years, e.g., by Gers, Schmidhuber, and Cummins (20 0 0) and Graves and Schmid- huber (2005) , to name a few. LSTM networks are speci.cally de- signed to learn long-term dependencies and are capable of over- coming the previously inherent problems of RNNs, i.e., vanishing and exploding gradients ( Sak, Senior, & Beaufays, 2014 ). LSTM networks are composed of an input layer, one or more hidden layers, and an output layer. The number of neurons in the input layer is equal to the number of explanatory variables (feature space). The number of neurons in the output layer re.ects the out- put space, i.e., two neurons in our case indicating whether or not a stock outperforms the cross-sectional median in t + 1 . The main characteristic of LSTM networks is contained in the hidden layer(s) 
Image of Fig. 1
Image of Fig. 2
consisting of so called memory cells. Each of the memory cells has three gates maintaining and adjusting its cell state s t : a forget gate ( f t ), an input gate ( i t ), and an output gate ( o t ). The structure of a memory cell is illustrated in Fig. 2 . At every timestep t , each of the three gates is presented with the input x t (one element of the input sequence) as well as the output h t.1 of the memory cells at the previous timestep t .1 . Hereby, the gates act as .lters, each ful.lling a different purpose: .The forget gate de.nes which information is removed from the cell state. .The input gate speci.es which information is added to the cell state. .The output gate speci.es which information from the cell state is used as output. The equations below are vectorized and describe the update of the memory cells in the LSTM layer at every timestep t . Hereby, the following notation is used: .x t is the input vector at timestep t . .W f , x , W f , h , W . s ,x , W . s ,h , W i , x , W i , h , W o , x , and W o , h are weight ma- trices. .b f , b . s , b i , and b o are bias vectors. .f t , i t , and o t are vectors for the activation values of the respec- tive gates. .s t and . s t are vectors for the cell states and candidate values. .h t is a vector for the output of the LSTM layer. During a forward pass, the cell states s t and outputs h t of the LSTM layer at timestep t are calculated as follows: In the .rst step, the LSTM layer determines which information should be removed from its previous cell states s t.1 . Therefore, the activation values f t of the forget gates at timestep t are computed based on the current input x t , the outputs h t.1 of the memory cells at the previous timestep ( t .1 ), and the bias terms b f of the for- get gates. The sigmoid function .nally scales all activation values 
into the range between 0 (completely forget) and 1 (completely remember): f t = sigmoid(W f,x x t + W f,h h t.1 + b f ) . (3) In the second step, the LSTM layer determines which information should be added to the network¡¯s cell states ( s t ). This procedure comprises two operations: .rst, candidate values . s t , that could po- tentially be added to the cell states, are computed. Second, the ac- tivation values i t of the input gates are calculated: . s t = tanh (W . s ,x x t + W . s ,h h t.1 + b . s ) , (4) i t = sigmoid(W i,x x t + W i,h h t.1 + b i ) . (5) In the third step, the new cell states s t are calculated based on the results of the previous two steps with .denoting the Hadamard (elementwise) product: s t = f t .s t.1 + i t .. s t . (6) In the last step, the output h t of the memory cells is derived as denoted in the following two equations: o t = sigmoid(W o,x x t + W o,h h t.1 + b o ) , (7) h t = o t .tanh (s t ) . (8) When processing an input sequence, its features are presented timestep by timestep to the LSTM network. Hereby, the input at each timestep t (in our case, one single standardized return) is pro- cessed by the network as denoted in the equations above. Once the last element of the sequence has been processed, the .nal output for the whole sequence is returned. During training, and similar to traditional feed-forward net- works, the weights and bias terms are adjusted in such a way that they minimize the loss of the speci.ed objective function across 
the training samples. Since we are dealing with a classi.cation problem, we use cross-entropy as objective function. The number of weights and bias terms being trained is calcu- lated as follows: let h denote the number of hidden units of the LSTM layer, and i the number of input features, then the number of parameters of the LSTM layer that needs to be trained is: 4 hi + 4 h + 4 h 2 = 4(hi + h + h 2 ) = 4(h (i + 1) + h 2 ) . (9) Hereby 4 hi refers to the dimensions of the four weight matrices applied to the inputs at each gate, i.e., W f,x , W . s ,x , W i,x , and W o , x . The 4 h refers to the dimensions of the four bias vectors ( b f , b . s , b i , and b o ). Finally, the 4 h 2 corresponds to the dimensions of the weight matrices applied to the outputs at the previous timestep, i.e., W f,h , W . s ,h , W i,h , and W o , h . For the training of the LSTM network, we apply three advanced methods via keras. First, we make use of RMSprop, a mini-batch version of rprop ( Tieleman & Hinton, 2012 ), as optimizer. The se- lection of RMSprop is motivated from the literature as it is ¡°usually a good choice for recurrent neural networks¡±( Chollet, 2016 ). Sec- ond, following Gal and Ghahramani (2016) , we apply dropout reg- ularization within the recurrent layer. Hereby, a fraction of the in- put units is randomly dropped at each update during training time, both at the input gates and the recurrent connections, resulting in reduced risk of over.tting and better generalization. Based on ini- tial experiments on the year 1991 (which is not used as part of the out-of-sample trading periods), we have observed that higher dropout values go along with a decline in performance and there- fore settled on a relatively low dropout value of 0.1. Third, we make use of early stopping to dynamically derive the number of epochs for training for each study period individually and to fur- ther reduce the risk of over.tting. Hereby, the training samples are split into two sets: one training and one validation set. The .rst set is used to train the network and to iteratively adjust its pa- rameters so that the loss function is minimized. After each epoch (one pass across the samples of the .rst set), the network predicts the unseen samples from the validation set and a validation loss is computed. Once the validation loss does not decrease for patience periods, the training is stopped and the weights of the model with the lowest validation loss is restored (see ModelCheckpoint call- back in Chollet, 2016 ). Following Granger (1993) , who suggests to hold back about 20 percent of the sample as ¡°post-sample¡±data, we use 80 percent of the training samples as training set and 20 percent as validation set (samples are assigned randomly to either training or validation set), a maximum training duration of 10 0 0 epochs, and an early stopping patience of 10. The speci.ed topol- ogy of our trained LSTM network is hence as follows: .Input layer with 1 feature and 240 timesteps. .LSTM layer with h = 25 hidden neurons and a dropout value of 0.1. This con.guration yields 2752 parameters for the LSTM, leading to a sensible number of approximately 93 training ex- amples per parameter. This value has been chosen in analogy to the con.guration of the deep net in Krauss et al. (2017) . A high number of observations per parameter allows for more robust estimates in case of such noisy training data, and reduces the risk of over.tting. .Output layer (dense layer) with two neurons and softmax acti- vation function 6 .a standard con.guration. 
3.4. Benchmark models .random forest, deep net, and logistic regression 
For benchmarking the LSTM, we choose random forests, i.e., a robust yet high-performing machine learning method, a stan- 
dard deep net, i.e., for showing the advantage of the LSTM, and a logistic regression, i.e., a standard classi.er as baseline. Note that random forests, standard deep nets, and the feature genera- tion for memory-free methods follow the speci.cations outlined in Krauss et al. (2017) for benchmarking reasons. Speci.cally, we use cumulative returns R m,s t as features with m ¡ô {{ 1 , . . . , 20 } ¡ú { 40 , 60 , . . . , 240 }} , see Eq. (1) and the same targets as de.ned in Section 3.2.2 . For the logistic regression model, we standardize the returns as denoted in Eq. (2) . 7 In the subsequent paragraphs, we brie.y outline how we calibrate the benchmarking methods. Random forest: The .rst algorithm for random decision forests has been suggested by Ho (1995) , and was later expanded by Breiman (2001) . Simply speaking, random forests are composed of many deep yet decorrelated decision trees built on different boot- strap samples of the training data. Two key techniques are used in the random forest algorithm .random feature selection to decor- relate the trees and bagging, to build them on different bootstrap samples. The algorithm is fairly simple: for each of the B trees in the committee, a bootstrap sample is drawn from the training data. A decision tree is developed on the bootstrap sample. At each split, only a subset m of the p features is available as potential split cri- terion. The growing stops once the maximum depth J is reached. The .nal output is a committee of B trees and classi.cation is per- formed as majority vote. We set the number of trees B to 10 0 0 , and maximum depth to J = 20 , allowing for substantial higher or- der interactions. Random feature selection is left at a default value of m = ¡î p for classi.cation, see Pedregosa et al. (2011) . We use a random forest as benchmark for two compelling rea- sons. First, it is a state-of-the-art machine learning model that re- quires virtually no tuning and usually delivers good results. Second, random forests in this con.guration are the best single technique in Krauss et al. (2017) and the method of choice in Moritz and Zimmermann (2014) .a large-scale machine learning application on monthly stock market data. As such, random forests serve as a powerful benchmark for any innovative machine learning model. Deep neural network: We deploy a standard DNN to show the relative advantage of LSTM networks. Speci.cally, we use a feed forward neural network with 31 input neurons, 31 neurons in the .rst, 10 in the second, 5 in the third hidden layer, and 2 neurons in the output layer. The activation function is maxout with two channels, following Goodfellow, Warde-Farley, Mirza, Courville, and Bengio (2013) , and softmax in the output layer. Dropout is set to 0.5, and L 1 regularization with shrinkage 0.0 0 0 01 is used .see Krauss et al. (2017) for further details. Logistic regression: As baseline model, we also deploy logistic regression. Details about our implementation are available in the documentation of sci-kit learn ( Pedregosa et al., 2011 ) and the references therein. The optimal L 2 regularization is determined among 100 choices on a logarithmic scale between 0.0 0 01 and 10,0 0 0 via 5-fold cross-validation on the respective training set and L-BFGS is deployed to .nd an optimum, while restricting the max- imum number of iterations to 100. Logistic regression serves as a baseline, so that we can derive the incremental value-add of the much more complex and computationally intensive LSTM network in comparison to a standard classi.er. 
3.5. Forecasting, ranking, and trading 
For all models, we forecast the probability . P s t+1 | t for each stock s to out-/underperform the cross-sectional median in period t + 1 , making only use of information up until time t . Then, we rank all stocks for each period t + 1 in descending order of this probability. 
The top of the ranking corresponds to the most undervalued stocks that are expected to outperform the cross-sectional median in t + 1 . As such, we go long the top k and short the .op k stocks of each ranking, for a long-short portfolio consisting of 2 k stocks .see Huck (2009, 2010) . 4. 
Results 
Our results are presented in three stages. First, we analyze re- turns prior to and after transaction costs of 5 bps per half-turn, following Avellaneda and Lee (2010) , and contrast the performance of the LSTM network against the random forest, the deep neural net, and the logistic regression. Second, we derive common pat- terns within the top and .op stocks, thus unveiling sources of prof- itability. Third, we develop a simpli.ed trading strategy based on these .ndings, and show that we can achieve part of the LSTM per- formance by capturing the most visible pattern with a transparent trading rule. 
4.1. Performance review 
4.1.1. Overview First, we analyze the characteristics of portfolios consisting of 2 k stocks, i.e., the top k stocks we go long, and the .op k stocks we go short. We choose k ¡ô {10, 50, 100, 150, 200} and compare the performance of the novel LSTM with the other approaches along the dimensions mean return per day, annualized standard devia- tion, annualized Sharpe ratio, and accuracy .prior to transaction costs. We see the following trends. Irrespective of the portfolio size k , the LSTM shows favorable characteristics vis-a-vis the other ap- proaches. Speci.cally, daily returns prior to transaction costs are at 0.46 percent, compared to 0.43 percent for the RAF, 0.32 per- cent for the DNN, and 0.26 for the LOG for k = 10 . Also for larger portfolio sizes, the LSTM achieves the highest mean returns per day, with the exception of k = 200 , where it is tied with the RAF. With respect to standard deviation .a risk metric .the LSTM is on a similar level as the RAF, with slightly lower values for k = 10 , and slightly higher values for increasing portfolio sizes. Both LSTM and RAF exhibit much lower standard deviation than the DNN and the logistic regression .across all levels of k . Sharpe ratio, or re- turn per unit of risk, is highest for the LSTM up until k = 100 , and slightly less than the RAF for even larger portfolios, when the lower standard deviation of the RAF outweighs the higher return of the LSTM. Accuracy, meaning the share of correct classi.cations, is an important machine learning metric. We see a clear advantage of the LSTM for the k = 10 portfolio, a slight edge until k = 100 , and a tie with the RAF for increasing sizes. We focus our subsequent analyses on the long-short portfolio with k = 10 . 4.1.2. Details on predictive accuracy The key task of the employed machine learning methods is to accurately predict whether a stock outperforms its cross-sectional 
median or not. In this paragraph, we benchmark the predictive ac- curacy of the LSTM forecasts against those of the other methods, and against random guessing. Furthermore, we compare the .nan- cial performance of the LSTM with 10 0,0 0 0 randomly generated long-short portfolios. First, we deploy the Diebold and Mariano (1995) (DM) test to evaluate the null that the forecasts of method i have inferior ac- curacy than the forecasts of method j , with i , j ¡ô { LSTM , RAF , DNN , LOG } and i  = j . For each forecast of each method, we assign a 0 in case the individual stock of the k = 10 portfolio is correctly classi- .ed and a 1 otherwise, and use this vector of classi.cation errors as input for the DM test. In total, we hence consider 5750 ¡¿2 ¡¿k = 115 , 0 0 0 individual forecasts for the stocks in the k = 10 portfolio for 5750 trading days in total. Results are depicted in panel A of Table 2 . In line one, for the null that the LSTM forecast is infe- rior to the forecasts of RAF, DNN, or LOG, we obtain p -values of 0.0143, 0.0037, and 0.0000, respectively. If we test at a .ve per- cent signi.cance level, and apply a Bonferroni correction for three comparisons, the adjusted signi.cance level is 1.67 percent, and we can still reject the individual null hypotheses that the LSTM fore- casts are less accurate than the RAF, DNN, or LOG forecasts. Hence, it makes sense to assume that the LSTM forecasts are superior to those of the other considered methods. Similarly, we can reject the null that the RAF forecasts are inferior to the LOG forecasts as well as the null that the DNN forecasts are inferior to the LOG fore- casts. In other words, the predictions of the sophisticated machine learning approaches all outperform those of a standard logistic re- gression classi.er. Apparently, the former are able to capture com- plex dependencies in our .nancial time series data that cannot be extracted by a standard logistic regression. However, from the DM test matrix, we cannot infer that the RAF forecasts outperform the DNN forecasts or vice versa .both methods seem to exhibit sim- ilar predictive accuracy. Our key .nding is though, that the LSTM network .despite its signi.cantly higher computational cost .is the method of choice in terms of forecasting accuracy. Second, we use the Pesaran.Timmermann (PT) test to evalu- ate the null hypotheses that prediction and response are indepen- dently distributed for each of the forecasting methods. We .nd p - values of zero up to the fourth digit, suggesting that the null can be rejected at any sensible level of signi.cance. In other words, each machine learning method we employ exhibits statistically sig- ni.cant predictive accuracy. Third, we provide a statistical estimate for the probability of the LSTM network having randomly achieved these results. For k = 10 , we consider a total of 5750 ¡¿10 ¡¿2 = 115 , 0 0 0 top and .op stocks, of which 54.3 percent are correctly classi.ed. If the true accuracy of the LSTM network was indeed 50 per- cent, we could model the number of ¡°successes¡±, i.e., the num- ber of correctly classi.ed stocks X in the top/.op with a binomial distribution, so X ¡­B (n = 115 , 0 0 0 , p = 0 . 5 , q = 0 . 5) . For such a large n , X appr. ¡­N (¥ì=np, ¥ò= ¡î npq ) . Now, we can easily compute the probability of achieving more than 54.3 percent accuracy, if the LSTM network had a true accuracy of 50 percent. We use the R package Rmpfr of Maechler (2016) to evaluate multiple-precision 
Image of Fig. 3
Image of Fig. 4
.oating point numbers and compute a probability of 2.7742e .187 that a random classi.er performs as well as the LSTM by chance alone. Finally, we assess the .nancial performance of 10 0,0 0 0 ran- domly sampled portfolios in the sense of Malkiel¡¯s monkey throw- ing darts at the Wall Street Journal¡¯s stock page ( Malkiel, 2007 ). Hereby, we randomly sample 10 stocks for the long and 10 stocks for the short portfolio without replacement for each of the 5750 trading days. All these portfolios over the 5750 days can be inter- preted as those being picked by one monkey. Then, we compute the mean average daily return of the combined long-short portfo- lios over these 5750 days to evaluate the monkey¡¯s performance. The results of 10 0,0 0 0 replications, i.e., of 10 0,0 0 0 different mon- keys, are illustrated in Fig. 4 . As expected, we see an average daily return of zero prior to transaction costs. More importantly, even the best performing ¡°monkey¡±with an average daily return of 0.05 percent, does not even come close to the results of the applied models shown in Fig. 3 . 4.1.3. Details on .nancial performance Table 3 provides insights of the .nancial performance of the LSTM, compared to the benchmarks, prior to and after transaction costs. 
Return characteristics: In panel A of Table 3 , we see that the LSTM exhibits favorable return characteristics. Mean returns of 0.46 percent before and 0.26 percent after transaction costs are statis- tically signi.cant, with a Newey.West t -statistic of 16.9336 before and 9.5792 after transaction costs, compared to a critical value of 1.9600 (5 percent signi.cance level). The median is only slightly smaller than the mean return, and quartiles as well as minimum and maximum values suggest that results are not caused by out- liers. The share of positive returns is at 55.74 percent after trans- action costs, an astonishingly high value for a long-short portfolio. The second best model is the RAF, with mean returns of 0.23 per- cent after transaction costs, albeit at slightly higher standard de- viation (0.0209 LSTM vs. 0.0215 RAF). The DNN places third with mean returns of 0.12 percent per day after transaction costs .still statistically signi.cant .compared to the logistic regression. The simplest model achieves mean returns of 0.06 percent per day af- ter transaction costs, which are no longer signi.cantly different from zero (Newey.West t -statistic of 1.6 6 6 6 compared to critical value of 1.9600). Note that the LSTM shows strong performance compared to the literature. The ensemble in Krauss et al. (2017) , which consists of a deep net, gradient-boosted trees, and a random forest yields average returns of 0.25 percent per day on the same time frame, data set, and after transaction costs. In other words, 
the LSTM as single model achieves a slightly stronger performance than a fully-.edged ensemble. Risk characteristics: In panel B of Table 3 , we observe a mixed picture with respect to risk characteristics. In terms of daily value at risk (VaR), the LSTM achieves second place after the RAF, with a 1-percent VaR of .5.45 percent compared to .4.95 percent for the RAF. The riskiest strategy stems from the logistic regression model, where a loss of .7.66 percent is exceeded in one percent of all cases .more than twice as risky as a buy-and-hold investment in the general market. However, the LSTM has the lowest maximum drawdown of 52.33 percent .compared to all other models and the general market. Annualized risk-return metrics: In panel C of Table 3 , we ana- lyze risk-return metrics on an annualized basis. We see that the LSTM achieves the highest annualized returns of 82.29 percent af- ter transaction costs, compared to the RAF (67.87 percent), the DNN (24.60 percent), the LOG (7.11 percent) and the general mar- ket (9.25 percent). Annualized standard deviation is at the second lowest level of 33.23 percent, compared to all benchmarks. The Sharpe ratio scales excess return by standard deviation, and thus can be interpreted as a signal-to-noise ratio in .nance, or the re- turn per unit of risk. We see that the LSTM achieves the highest level of 2.34, with the RAF coming in second with 1.87, while all other methods have a Sharpe ratio well below 1.0. From a .nancial perspective, we have two key .ndings. First, the LSTM outperforms the RAF by a clear margin in terms of re- turn characteristics and risk-return metrics. We are thus able to show that choosing LSTM networks .which are inherently suitable for time series prediction tasks .outperform shallow tree-based models as well as standard deep learning. Second, we demonstrate that a standard logistic regression is not able to capture the same level of information from the feature space .even though we perform in-sample cross-validation to .nd optimal regularization values. 
4.1.4. A critical review of LSTM pro.tability over time In Fig. 5 , we display strategy performance over time, i.e., from January 1993 to October 2015. We focus on the most competitive techniques, i.e., the LSTM and the random forest. 1993/01.20 0 0/12: These early times are characterized by strong performance .with the LSTM being superior to the RAF with re- spect to average returns per day, Sharpe ratio, and accuracy in al- most all years. Cumulative payouts on 1 USD average invest per day reach a level of over 11 USD for the LSTM and over 8 USD for the RAF until 20 0 0. When considering this outperformance, it is important to note that LSTM networks have been introduced in 1997, and can only be feasibly deployed ever since the emergence of GPU computing in the late 20 0 0s. As such, the exceptionally high returns in the 90s may well be driven by the fact that LSTMs were either unknown to or completely unfeasible for the majority of market professionals at that time. A similar argument holds true for random forests. 2001/01.2009/12: The second period corresponds to a time of moderation. The LSTM is still able to produce positive returns after transaction costs in all years, albeit at much lower levels compared to the 90s. When considering cumulative payouts, we see that the outperformance of the LSTM compared to the random forest per- sists up to the .nancial crisis. A key advantage of these tree-based methods is their robustness to noise and outliers .which plays out during such volatile times. The RAF achieves exceptionally high re- turns and consistent accuracy values at a Sharpe ratio of up to 6. As such, total payouts on 1 USD investment amount to 4 USD for the LSTM, and to 5.6 USD for the RAF .with the majority of the RAF payouts being achieved during the .nancial crisis. It seems reasonable to believe that this period of moderation is caused by an increasing diffusion of such strategies among in- dustry professionals, thus gradually eroding pro.tability. However, for the RAF, the global .nancial crisis in 20 08/20 09 constitutes an exception .with a strong resurgence in pro.tability. Following the 
Image of Fig. 5
literature, these pro.ts may be driven by two factors. First, it is reasonable to believe that investors are ¡°losing sight of the trees for the forest¡±( Jacobs and Weber, 2015 , p. 75) at times of .nancial turmoil .thus creating realtive-value arbitrage opportunities, see Clegg and Krauss (2018) . Second, at times of high volatility, limits to arbitrage are exceptionally high as well, making it hard to cap- ture such relative-value arbitrage opportunities. Speci.cally, short selling costs may rise for hard to borrow stocks .see Gregoriou (2012) , Engelberg, Reed, and Ringgenberg (2017) , or, in even more 
severe cases, short-selling may be banned altogether. But also the long side is affected, e.g., when widening spreads and decreasing liquidity set a cap on returns. 2010/01.2015/10: The third period corresponds to a time of de- terioration. The random forest loses its edge, and destroys more than 1 USD in value, based on an average investment of 1 USD per day. By contrast, the LSTM continues realizing higher accuracy scores in almost all years and is able to keep capital approximately constant, after transaction costs. When comparing to the literature, 
Image of Fig. 6
it is remarkable to see that the ensemble presented in Krauss et al. (2017) also runs into a massive drawdown as of 2010 .whereas the single-model LSTM returns .uctuate around zero. Re- gardless, the edge of the presented machine learning methods seems to have been arbitraged away. This effect can be observed in many academic research papers targeting quantitative strategies .see, for example, Bogomolov (2013) , Rad, Low, and Faff(2016) , Green, Hand, and Zhang (2017) , Clegg and Krauss (2018) , among others. 4.1.5. Industry breakdown Coming from the LSTM¡¯s ability to identify structure, we next analyze potential preferences for certain industries in the k = 10 portfolio. Speci.cally, we consider the difference between the share of an industry in the k = 10 portfolio and the share of that industry in the S&P 500 at that time. A positive value indicates that the industry is overweighted by the LSTM network, and a negative value indicates that it is underweighted. Fig. 6 depicts our .ndings for the most interesting industries .oil and gas, technology, .nancials, and all others. First, we see that there is a signi.cant overweight of technology stocks building up end of the 90s .corresponding to the growing dot-com bubble and its bust. Second, we observe a rise in .nancial stocks around the years 20 08/20 09 .corresponding to the global .nancial crisis. And third, oil and gas stocks gain in weight as of 2014 .falling together with the recent oil glut and the signi.cant drop in crude oil prices. Note: a more detailed breakdown depicting the relative overweight for each of the GICS industries individually for the top k and the .op k portfolio is provided in the Appendix. 8 It is interesting to see that the overweight in each industry adequately captures major market developments. We hypothesize that this behavior is driven by increasing volatility levels, and further elaborate on that point in the following section. 
4.2. Common patterns in the top and .op stocks 
Machine learning approaches .most notablyarti.cial neural networks .are commonly considered as black-box methods. In this section, we aim for shining light into that black-box, thus unveiling common patterns in the top and .op stocks. First, we conduct a very simple yet effective analysis. For every day, we extract all 240-day return sequences for the top and .op k stocks. 9 Then, we stack all 5750 ¡¿10 top and the same number of .op sequences on top of each other. For better representation, we accumulate the 240 returns of each sequence to a return index, starting at a level of 0 on day t .240 and then average these re- turn index sequences. We hence obtain two generalized sequences, 
containing the patterns of the top 10 and of the .op 10 stocks. Results are depicted in Fig. 7 , contrasted to the behavior of the cross-section across all stocks (mean). We see that the top and the .op stocks both exhibit below-mean momentum in the sense of Jegadeesh and Titman (1993) , i.e., they perform poorly from day t .240 until day t .10 , compared to the cross-section. From day t .9 until t (note: the prediction is made on day t ), the top stocks start crashing at accelerating pace, losing about 50 percent of what they have gained during the previous 230 days on average. By con- trast, the .op stocks show an inverse pattern during the past 10 days prior to trading, and exhibit increasingly higher returns. It is compelling to see that the LSTM extracted such a strong common- ality among the .op stocks and the top stocks. Second, based on this visual insight, we construct further time- series characteristics for the top and .op stocks. Thereby, we fol- low the same methodology as above for generating the descriptive statistics, i.e., we compute the 240-day return sequence for each stock, calculate the desired statistic, and average over all k stocks, with k ¡ô {1, 5, 10, 10 0, 20 0}. Speci.cally, we consider the following statistics: .(Multi-)period returns, as de.ned in Section 3.2 , with m ¡ô {1, 5, 20, 240}, denoted as Return_t_t-m in the graphic, where m is counting backwards from day t , the last element of the se- quence (i.e., the day on which the prediction for t + 1 is made). Moreover, we consider the cumulative return from day t .20 of the sequence until day t .240 of the sequence, denoted as Return_t-20_t-240. .Sample standard deviations, computed over the same time frames as above, and following the same naming conventions. .Sample skewness and kurtosis over the full 240 days of each sequence. .The coe.cients of a Carhart regression in the sense of Gatev, Goetzmann, and Rouwenhorst (2006) , Carhart (1997) . Thus, we extract the alpha of each stock (FF_Alpha .denoting the id- iosyncratic return of the stock beyond market movements), the beta (FF_Mkt-RF .denoting how much the stock moves when the market moves by 1 percent), the small minus big fac- tor (FF_SMB .denoting the loading on small versus large cap stocks), the high minus low factor (FF_HML .denoting the loading on value versus growth stocks), the momentum factor (FF_Mom .denoting the loading on the momentum factor in the sense of Jegadeesh and Titman (1993) , Carhart (1997) , the short-term reversal factor (FF_ST_Rev .denoting the loading on short-term reversal effects) and the R squared (FF_R_squared .denoting the percentage of return variance explained by the factor model). Please note that these coe.cients refer to the in- dividual stocks¡¯ 240 days history prior to being selected by the LSTM for trading and not to the exposure of the resulting LSTM strategy to these factors (see Section 4.3 for this analysis). 
Image of Fig. 7
Image of Fig. 8
Results are shown in Fig. 8 . The graphical patterns from the last paragraph now become apparent in a quantitative manner .across different values of k . First, the top stocks exhibit highly neg- ative returns in the last days prior to the prediction, and the .op stocks highly positive returns. This behavior corresponds to short- term reversal strategies, as outlined in Jegadeesh (1990) , Lehmann (1990) , Lo and MacKinlay (1990) .to name a few. The LSTM net- work seems to independently .nd the stock market anomaly, that stocks that sharply fall in the last days then tend to rise in the next period and vice versa. The effect is stronger, the smaller k , i.e., the lower the number of stocks considered in the portfo- lio. Second, both top and .op stocks exhibit weak momentum in the sense of Jegadeesh and Titman (1993) . For example, the top 10 stocks show an average momentum of 9.1 percent from day t .240 until day t .20 of the sequence, compared to 11.7 percent, i.e., the mean across all stocks. The .op stocks exhibit a similar pattern. The smaller k , the stronger the underperformance with respect to the momentum effect. Third, when considering stan- dard deviation, it becomes obvious that volatility plays an impor- tant role (see also LeBaron, 1992 ). Clearly, high volatility stocks are preferred compared to the market, and volatility is increas- ing for the more extreme parts of the ranking. Volatility in the sense of beta can be an important return predictive signal .see Baker, Bradley, and Wurgler (2011) , Frazzini and Pedersen (2014) , 
Hong and Sraer (2016) , and a higher beta is a key characteris- tic of the selected stocks. Also, skewness is similar to the gen- eral market, and the returns of the top and .op stocks are more leptokurtic than the general market .a potential return predic- tive signal remotely relating to the works of Kumar (2009) , Boyer, Mitton, and Vorkink (2010) , Bali, Cakici, and Whitelaw (2011) on stocks with ¡°lottery-type¡±features. Finally, we seethat theabove mentioned time-series characteristics are also con.rmed in the re- gression coe.cients. Top and .op k stocks exhibit higher beta, a negative loading on the momentum factor and a positive loading on the short-term reversal factor .withthe respective magnitude increasing with lower values for k . We observe a slight loading on the SMB factor, meaning that smaller stocks among the S&P 500 constituents are selected .which usually have higher vola- tility. Given that the LSTM network independently extracted these patterns from 240-day sequences of standardized returns, it is astonishing to see how well some of them relate to commonly known capital market anomalies. This .nding is compelling, given that none of the identi.ed characteristics is explicitly coded as fea- ture, but instead derived by the LSTM network all by itself .an- other key difference to the memory-free models, such as the ran- dom forest, who are provided with mutli-period returns as fea- tures. 
4.3. Sources of pro.tability 
Simpli.ed trading strategy: In this section, we build on the pre- vious analysis and construct a simpli.ed trading strategy. From Figs. 7 and 8 , we see that the most dominant characteristic is the slump or steep rise in returns in the last days prior to trading. On a similar note, Krauss et al. (2017) .nd that the last returns are the most important variables for their machine learning models, and so do Moritz and Zimmermann (2014) . For the sake of simplicity, we build on this most salient point, and loosely follow Jegadeesh (1990) , Lehmann (1990) , two of the creators of the short-term re- versal anomaly. Speci.cally, we go long the top k stocks with the most negative 5-day cumulative return prior to the trading day, and short the .op k stocks with the most positive 5-day cumu- lative return prior to the trading day .all equal-weight. For this very simple yet transparent strategy, we .nd average daily returns of 0.23 percent, prior to transaction costs, or 0.03 percent after transaction costs. We hence see that capitalizing only on the most prominent feature, i.e., the past 5-day cumulative return, merely yields about 50 percent of the returns of the LSTM strategy prior to transaction costs. After transaction costs, the short-term reversal strategy looses its edge, contrary to the LSTM. Hence, we may cau- tiously conclude that additional explanatory power is contained in the other features, forming more subtle patterns not directly dis- cernible from the aggregated perspective in Fig. 8 . Building on this .nding, we next move on and evaluate the exposure of LSTM re- turns to common sources of systematic risk. Exposure to systematic sources of risk: As commonly performed in portfolio analysis and similar to Krauss et al. (2017) , we evaluate the exposure of the long-short portfolio to common sources of sys- tematic risk. We use the Fama.French three factor model (FF3) as in Fama and French (1996) , enhanced by three additional factors. It thus consists of a market factor, a factor measuring exposure to small minus big capitalization stocks (SMB), and a factor measur- ing exposure to high minus low book-to-market stocks (HML). In addition, we include a momentum factor ( Carhart, 1997 ), a short- term reversal factor ( Gatev et al., 2006 ), and a long-term reversal factor. All data used for these factor models are obtained from Ken- neth French¡¯s website. 10 The underlying idea is to measure addi- tional exposure to cross-sectional price dynamics. Our .ndings are summarized in Table 4 . At .rst, we observe that the LSTM returns exhibit by far the lowest coe.cient of determination of 0.0330 among all models. In other words .only a fraction of daily LSTM raw returns of 0.46 percent can be explained by such common sources of systematic risk. Indeed, an alpha of 0.42 percent per day remains (intercept). By contrast, the RAF has a higher coe.cient of determination of 0.1338, and only 0.34 percent of daily alpha re- main (compared to raw returns of 0.43 percent). Even though R 2 is low (which can often be the case in .nancial research .see Gatev et al., 2006 ) .we can still compare factor loadings with our expectations. The LSTM is basically market-neutral, meaning that the long and the short portfolio (in which we invest equal dol- lar amounts) exhibit similar beta. By contrast, the other strategies seem to favor slightly higher beta stocks on the long leg than on the short leg. The SMB factor is generally non-signi.cant and close to zero across all models. Exposure to HML varies across strategies. Whereas the LSTM favors glamour stocks (negative and signi.cant loading), the RAF has a tendency to select value stocks (positive and signi.cant loading); DNN and the simple logistic regression do not have any exposure. Most interesting are the factors capturing cross-sectional price dynamics, given that they are largely in line with the features we are feeding. We see that all models have pos- itive and statistically signi.cant exposure towards the momentum 
and the short-term reversal factor .meaning that shorter-term cross-sectional price dynamics are captured. Interestingly enough, these price-based factor loadings are more dominant for the logis- tic regression compared to the LSTM. This increase in loadings may be due to the fact that the simpler model is structurally unable to extract higher-order patterns from the supplied features .given that we did not feed any interactions. Lastly, the long-term rever- sal factor is insigni.cant for the LSTM, and has slightly negative loadings for the other strategies, albeit at lower levels of signi.- cance. We believe that this factor has generally lower explanatory power, given that we are addressing a very short trading horizon. In a nutshell, the LSTM returns can barely be explained by system- atic sources of risk .and much less so than those of the other machine learning models we have deployed. 
4.4. Robustness to market microstructure 
A key result of the last subsection is that the LSTM-based stock selection exhibits similarities to a typical contrarian investment strategy. Microstructural effects, particularly the bid-ask bounce, are commonly known to introduce an upward bias to such contrar- ian investment strategies .see Conrad and Kaul (1989) , Jegadeesh (1990) , Jegadeesh and Titman (1995) , Gatev et al. (2006) . The un- derlying reason is simple. The LSTM strategy tends to buy recent losers and sell recent winners. Conditional on being among the top k stocks, the winner¡¯s quote is more likely to be an ask quote, and conditional on being among the .op k stocks, the loser¡¯s quote is more likely to be a bid quote .similar to the reasoning on the con- trarian investment strategy presented in Gatev et al. (2006) . Im- plicitly, we would thus be buying at the bid in case of the losers, and selling at the ask in case of the winners. The inverse applies when covering positions .part of the surge in prices of the re- cent loser may be driven by the jump from bid to ask, and part of the slump in prices of the recent winner may be driven by the jump from ask to bid. In light of these considerations, it is neces- sary to analyze the robustness of our .ndings. 11 There are several solutions to this issue. First, longer trading horizons are typically more robust to mi- crostructural effects. Following e.g., Lehmann (1990) in his short- 
term reversal strategy or Huck (2009, 2010) in his machine learn- ing strategies, we introduce a weekly variant of the LSTM strategy .effectively bridging the gap between lower turnover (weekly vs. daily), and retaining a su.cient number of training examples for the LSTM to successfully extract structure from the data. The lat- ter excludes a monthly variant, without signi.cantly changing the study design. Speci.cally, we design the LSTM in full analogy to the cornerstones outlined in Section 3 , but on a 5-day instead of a 1-day horizon. 12 Moreover, we implement .ve overlapping port- folios of LSTM strategies with a 5-day forecast horizon to avoid a bias introduced by the starting date ( Jegadeesh & Titman, 1993 ). Thereby, each portfolio is offset to the other by one trading day, and returns are averaged across all portfolios. Note that we log the invested capital market-to-market on a daily basis for all .ve port- folios, so we are able to exhibit daily returns for the sake of com- parability. Second, execution on volume-weighted-average-prices (VWAPs) is more realistic and much less susceptible to bid-ask bounce (see for example, Lee, Chan, Faff, & Kalev, 2003 ). Hence, we use minute- binned transaction data from January 1998 to October 2015 for all S&P 500 stocks from QuantQuote to create VWAPs, which we use for feature engineering, for target creation, and for backtest- ing .see Section 3 . 13 Speci.cally, we divide the 391 minute-bins of each trading day (starting at 09:30 and ending at 16:00, includ- 
ing the opening) in 23 bins of 17 minutes duration, so we obtain 23 VWAPs. We use the 22nd VWAP as anchor point for creating features, and the 23rd VWAP for executing our trades, and create features in full analogy to Section 3.2 . Third, a one-day-waiting rule as in Gatev et al. (2006) is a proper remedy against bid-ask bounce. Speci.cally, we delay the execution by one entire trading day after signal generation. This rule only makes sense for the weekly strategy. In case of the daily strategy, the delay covers the entire forecast horizon, rendering the predictions null and void. Fourth, for the sake of completeness, we use transaction costs of 5 bps per half-turn throughout this paper .a fairly robust value for U.S. large caps. For example, Jha (2016) assumes merely 2 bps for the largest 500 stocks of the U.S. stock universe over a similar time horizon. In a nutshell, we run the following robustness checks on the LSTM strategy. Model M 1 is the baseline, showing the results of the standard LSTM strategy as discussed in the previous sections, i.e., with daily turnover and execution on the close, but constrained to the time frame of the QuantQuote data set from 1998 to 2015. Model M 2 shows the effects when executing this strategy on the VWAP instead of the closing price. Models M 3 .M 5 are weekly vari- ants of the baseline strategy. Thereby, M 3 is executed on the clos- ing price, M 4 on the VWAP, and M 5 with a one-day-waiting rule on the closing price. The results of these variants are depicted in Table 5 .before and after transaction costs of 5 bps per half-turn. After transaction costs, the baseline LSTM strategy M 1 results in average returns of 0.20 percent per day on the shorter time frame from 1998 to 2015. Executing on VWAPs instead of at the closing price in case of model M 2 leads to a deterioration to 0.16 percent per day .still statistically signi.cant with a t -statistic above 5 and economically meaningful with returns of 43 per- cent p.a. The weekly strategies generate similar returns per day, 
Image of Fig. 9
i.e., 0.11 percent in case of M 3 (execution on close), 0.09 percent in case of M 4 (execution on VWAP), and 0.09 percent in case of M 5 (execution on close, one-day-waiting) .all of them statistically and economically signi.cant with t -statistics above 3 and annual- ized returns above 20 percent. The rest of the table reads in full analogy to Table 3 , and shows a relative outperformance of the LSTM strategy compared to the general market, after robustness checks. In recent years, however, as depicted in Fig. 9 , we see that re- turns .atten out, so the LSTM edge seems to have been arbitraged away. Despite of this fact, model performance is robust in light of market frictions over an extended period of time, i.e., from 1998 up until 2009, with particular upward spikes in returns around the .nancial crisis. 5. 
Conclusion 
In this paper, we apply long-short term memory networks to a large-scale .nancial market prediction task on the S&P 500, from December 1992 until October 2015. With our work, we make three key contributions to the literature: the .rst contribution focuses on the large-scale empirical application of LSTM networks to .nancial time series prediction tasks. We provide an in-depth guide, closely following the entire data science value chain. Speci.cally, we frame a proper prediction task, derive sensible features in the form of 240-day return sequences, standardize the features during prepro- cessing to facilitate model training, discuss a suitable LSTM archi- tecture and training algorithm, and derive a trading strategy based on the predictions, in line with the existing literature. We compare the results of the LSTM against a random forest, a standard deep net, as well as a simple logistic regression. We .nd the LSTM, a methodology inherently suitable for this domain, to beat the stan- dard deep net and the logistic regression by a very clear margin. Most of the times .with the exception of the global .nancial crisis .the random forest is also outperformed. Our .ndings of statisti- cally and economically signi.cant returns of 0.46 percent per day prior to transaction costs posit a clear challenge to the semi-strong form of market e.ciency, and show that deep learning could have been an effective predictive modeling technique in this domain up until 2010. These .ndings are largely robust in light of market fric- tions, given that pro.tability remains statistically and economically signi.cant when executing the daily LSTM strategy on VWAPs in- stead of closing prices, and when running a weekly variant of the LSTM strategy with a one-day waiting period after signal genera- 
tion. As of 2010, the markets exhibit an increase in e.ciency with respect to the machine learning methods we deploy, with LSTM pro.tability .uctuating around zero and RAF pro.tability dipping strictly into the negative domain. Also, the conceptual and empirical aspects on LSTM networks outlined in this paper go beyond a pure .nancial market applica- tion, but are intended as guideline for other researchers, wishing to deploy this effective methodology to other time series predic- tion tasks with large amounts of training data. Second, we disentangle the black-box ¡°LSTM¡±, and unveil com- mon patterns of stocks that are selected for pro.table trading. We .nd that the LSTM portfolio consist of stocks with below-mean momentum, strong short-term reversal characteristics, high volatil- ity and beta. All these .ndings relate to some extent to exist- ing capital market anomalies. It is impressive to see that some of them are independently extracted by the LSTM from a 240-day sequence of standardized raw returns. It is subject to future re- search to identify further, more subtle patterns LSTM neural net- works learn from .nancial market data, and to validate the pro.t potential of these patterns in more re.ned, rules-based trading strategies. Third, based on the common patterns of the LSTM portfolio, we devise a simpli.ed rules-based trading strategy. Speci.cally, we short short-term winners and buy short-term losers, and hold the position for one day .just like in the LSTM application. With this transparent, simpli.ed strategy, we achieve returns of 0.23 percent per day prior to transaction costs .about 50 percent of the LSTM returns. Further regression analysis on common sources of system- atic risk unveil a remaining alpha of 0.42 percent of the LSTM prior to transaction costs and generally a lower risk exposure compared to the other models we deploy. Overall, we have successfully demonstrated that an LSTM net- work is able to effectively extract meaningful information from noisy .nancial time series data. Compared to random forests, stan- dard deep nets, and logistic regression, it is the method of choice with respect to predictional accuracy and with respect to daily re- turns after transaction costs. As it turns out, deep learning .in the form of LSTM networks .hence seems to constitute an advance- ment in this domain as well. Appendix. 
Detailed industry breakdown 
Fig. A1 . 
Image of Fig. A1
References 
Abadi, M., Agarwal, A., Barham, P., Brevdo, E., Chen, Z., Citro, C., et al., (2015). Tensor- Flow: Large-scale machine learning on heterogeneous systems. Software avail- able from tensor.ow.org, http://tensor.ow.org/ . Atsalakis, G. S. , & Valavanis, K. P. (2009). Surveying stock market forecasting tech- niques .Part II: Soft computing methods. Expert Systems with Applications, 36 (3), 5932.5941 . Avellaneda, M. , & Lee, J.-H. (2010). Statistical arbitrage in the US equities market. Quantitative Finance, 10 (7), 761.782 . Baker, M. , Bradley, B. , & Wurgler, J. (2011). Benchmarks as limits to arbitrage: Un- derstanding the low-volatility anomaly. Financial Analysts Journal, 67 (1), 40.54 . Bali, T. G. , Cakici, N. , & Whitelaw, R. F. (2011). Maxing out: Stocks as lotteries and the cross-section of expected returns. Journal of Financial Economics, 99 (2), 427.446 . Bogomolov, T. (2013). Pairs trading based on statistical variability of the spread pro- cess. Quantitative Finance, 13 (9), 1411.1430. doi: 10.1080/146976 88.2012.74 8934 . Boyer, B. , Mitton, T. , & Vorkink, K. (2010). Expected idiosyncratic skewness. Review of Financial Studies, 23 (1), 169.202 . Breiman, L. (2001). Random forests. Machine learning, 45 (1), 5.32 . Britz, D. (2015). Recurrent neural network tutorial, part 4 .Implementing a GRU/LSTM RNN with Python and Theano. http://www.wildml.com/2015/10/ recurrent- neural- network- tutorial- part- 4- implementing- a- grulstm- rnn- with- python- and- theano/ . Carhart, M. M. (1997). On persistence in mutual fund performance. The Journal of Finance, 52 (1), 57. doi: 10.2307/2329556 . Chollet, F. (2016). Keras. https://github.com/fchollet/keras Clegg, M., & Krauss, C. (2018). Pairs trading with partial cointegration. Quantitative Finance, 18 (1), 121.138. doi: 10.1080/14697688.2017.1370122 . Conrad, J. , & Kaul, G. (1989). Mean reversion in short-horizon expected returns. Re- view of Financial Studies, 2 (2), 225.240 . Diebold, F. X. , & Mariano, R. S. (1995). Comparing predictive accuracy. Journal of Business & Economic Statistics, 13 (3), 253.263 . Dixon, M. , Klabjan, D. , & Bang, J. H. (2015). Implementing deep neural networks for .nancial market prediction on the Intel Xeon Phi. In Proceedings of the eighth workshop on high performance computational .nance (pp. 1.6) . Engelberg, J., Reed, A. V., & Ringgenberg, M. (2017). Short selling risk. Journal of Finance . doi: 10.2139/ssrn.2312625 . (forthcoming) Fama, E. F. (1970). E.cient capital markets: A review of theory and empirical work. The Journal of Finance, 25 (2), 383.417. doi: 10.2307/2325486 . Fama, E. F., & French, K. R. (1996). Multifactor explanations of asset pricing anoma- lies. The Journal of Finance, 51 (1), 55.84. doi: 10.2307/2329302 . Frazzini, A., & Pedersen, L. H. (2014). Betting against beta. Journal of Financial Eco- nomics, 111 (1), 1.25. doi: 10.1016/j.j.neco.2013.10.005 . Gal, Y. , & Ghahramani, Z. (2016). A theoretically grounded application of dropout in recurrent neural networks. In Proceedings of the 2016 advances in neural infor- mation processing systems (pp. 1019.1027) . Gatev, E. , Goetzmann, W. N. , & Rouwenhorst, K. G. (2006). Pairs trading: Per- formance of a relative-value arbitrage rule. Review of Financial Studies, 19 (3), 797.827 . Gers, F. A. , Schmidhuber, J. , & Cummins, F. (20 0 0). Learning to forget: Continual prediction with LSTM. Neural Computation, 12 (10), 2451.2471 . Giles, C. L. , Lawrence, S. , & Tsoi, A. C. (2001). Noisy time series prediction using recurrent neural networks and grammatical inference. Machine Learning, 44 (1), 161.183 . Goodfellow, I. , Warde-Farley, D. , Mirza, M. , Courville, A. , & Bengio, Y. (2013). Maxout networks. Proceedings of the 30th International Conference on Machine Learning (pp. 1319.1327) . Granger, C. W. (1993). Strategies for modelling nonlinear time-series relationships. Economic Record, 69 (3), 233.238 . Graves, A. (2013). Generating sequences with recurrent neural networks. CoRR , arXiv preprint arXiv: 1308.0850 . Graves, A. , Liwicki, M. , Fernandez, S. , Bertolami, R. , Bunke, H. , & Schmidhu- ber, J. (2009). A novel connectionist system for unconstrained handwriting recognition. IEEE Transactions on Pattern Analysis and Machine Intelligence, 31 (5), 855.868 . Graves, A. , Mohamed, A.-r. , & Hinton, G. (2013). Speech recognition with deep re- current neural networks. In Proceedings of the 2013 IEEE international conference on acoustics, speech and signal processing (pp. 6645.6649). IEEE . Graves, A. , & Schmidhuber, J. (2005). Framewise phoneme classi.cation with bidi- rectional LSTM and other neural network architectures. Neural Networks, 18 (5), 602.610 . Green, J., Hand, J. R. M., & Zhang, X. F. (2017). The characteristics that provide in- dependent information about average U.S. monthly stock returns. The Review of Financial Studies, 30 (12), 4389.4436. doi: 10.1093/rfs/hhx019 . Green, J., Hand, J. R. M., & Zhang, X. F. (2013). The supraview of return pre- dictive signals. Review of Accounting Studies, 18 (3), 692.730. doi: 10.1007/ s11142- 013- 9231- 1 . Gregoriou, G. N. (2012). Handbook of short selling . Amsterdam and Boston, MA: Aca- demic Press . H2O (2016). H2O documentation. http://h2o.ai/docs , http://h2o-release.s3. amazonaws.com/h2o/rel- tukey/4/docs- website/h2o- docs/index.html . Ho, T. K. (1995). Random decision forests. In Proceedings of the third international conference on document analysis and recognition: 1 (pp. 278.282). IEEE . Hochreiter, S. , & Schmidhuber, J. (1997). Long short-term memory. Neural computa- tion, 9 (8), 1735.1780 . 
Hong, H. , & Sraer, D. A. (2016). Speculative betas. The Journal of Finance, 71 (5), 2095.2144 . Huck, N. (2009). Pairs selection and outranking: An application to the S&P 100 in- dex. European Journal of Operational Research, 196 (2), 819.825 . Huck, N. (2010). Pairs trading and outranking: The multi-step-ahead forecasting case. European Journal of Operational Research, 207 (3), 1702.1716 . Jacobs, H. (2015). What explains the dynamics of 100 anomalies? Journal of Banking & Finance, 57 , 65.85. doi: 10.1016/j.jbank.n.2015.03.006 . Jacobs, H., & Weber, M. (2015). On the determinants of pairs trading pro.tability. Journal of Financial Markets, 23 , 75.97. doi: 10.1016/j..nmar.2014.12.001 . Jegadeesh, N. (1990). Evidence of predictable behavior of security returns. The Jour- nal of Finance, 45 (3), 881.898. doi: 10.2307/2328797 . Jegadeesh, N. , & Titman, S. (1993). Returns to buying winners and selling losers: Implications for stock market e.ciency. The Journal of Finance, 48 (1), 65.91 . Jegadeesh, N. , & Titman, S. (1995). Overreaction, delayed reaction, and contrarian pro.ts. Review of Financial Studies, 8 (4), 973.993 . Jha, V. (2016). Timing equity quant positions with short-horizon alphas. The Journal of Trading, 11 (3), 53.59 . Karpathy, A. (2015). The unreasonable effectiveness of recurrent neural networks. http://karpathy.github.io/2015/05/21/rnn-effectiveness/ . Krauss, C. , Do, X. A. , & Huck, N. (2017). Deep neural networks, gradient-boosted trees, random forests: Statistical arbitrage on the S&P 500. European Journal of Operational Research, 259 (2), 689.702 . Kumar, A. (2009). Who gambles in the stock market? The Journal of Finance, 64 (4), 1889.1933. doi: 10.1111/j.1540-6261.2009.01483.x . LeBaron, B. (1992). Some relations between volatility and serial correlations in stock market returns. The Journal of Business, 65 (2), 199.219 . LeCun, Y., Bengio, Y., & Hinton, G. (2015). Deep learning. Nature, 521 (7553), 436.4 4 4. doi: 10.1038/nature14539 . Lee, D. D. , Chan, H. , Faff, R. W. , & Kalev, P. S. (2003). Short-term contrarian invest- ing .Is it pro.table?... Yes and No. Journal of Multinational Financial Manage- ment, 13 (4), 385.404 . Lehmann, B. N. (1990). Fads, martingales, and market e.ciency. The Quarterly Jour- nal of Economics, 105 (1), 1. doi: 10.2307/2937816 . Lo, A. W. , & MacKinlay, A. C. (1990). When are contrarian pro.ts due to stock mar- ket overreaction? Review of Financial Studies, 3 (2), 175.205 . Maechler, M. (2016). Rmpfr: R MPFR .multiple precision .oating-point reliable. R package. https://cran.r-project.org/package=Rmpfr . Malkiel, B. G. (2007). A random walk down Wall Street: The time-tested strategy for successful investing . WW Norton & Company . McKinney, W. (2010). Data structures for statistical computing in Python. In Pro- ceedings of the ninth Python in science conference: 445 (pp. 51.56) . Medsker, L. (20 0 0). Recurrent neural networks: Design and applications. Interna- tional series on computational intelligence . CRC-Press . Moritz, B. , & Zimmermann, T. (2014). Deep conditional portfolio sorts: The relation between past and future stock returns. Working paper . LMU Munich and Harvard University . Olah, C. (2015). Understanding LSTM Networks. http://colah.github.io/posts/ 2015- 08- Understanding- LSTMs/ . Pedregosa, F. , Varoquaux, G. , Gramfort, A. , Michel, V. , Thirion, B. , Grisel, O. , et al. (2011). Scikit-learn: Machine learning in python. Journal of Machine Learn- ing Research, 12 , 2825.2830 . Peterson, B. G., & Carl, P. (2014). PerformanceAnalytics: Econometric tools for performance and risk analysis. R package, http://CRAN.R-project.org/package= PerformanceAnalytics . Python Software Foundation (2016). Python 3.5.2 documentation. Available at https: //docs.python.org/3.5/ . R Core Team (2016). R: A language and environment for statistical computing. http: //www.R-project.org/ . Rad, H. , Low, R. K. Y. , & Faff, R. (2016). The pro.tability of pairs trading strate- gies: Distance, cointegration and copula methods. Quantitative Finance, 16 (10), 1541.1558 . Sak, H., Senior, A.W., & Beaufays, F. (2014). Long short-term memory based recur- rent neural network architectures for large vocabulary speech recognition. CoRR , arXiv preprint arXiv: 1402.1128 . Schmidhuber, J. (2015). Deep learning in neural networks: An overview. Neural Net- works, 61 , 85.117 . Sermpinis, G., Theo.latos, K., Karathanasopoulos, A., Georgopoulos, E. F., & Du- nis, C. (2013). Forecasting foreign exchange rates with adaptive neural networks using radial-basis functions and particle swarm optimization. European Journal of Operational Research, 225 (3), 528.540. doi: 10.1016/j.ejor.2012.10.020 . Siah, K. W., & Myers, P. (2016). Stock market prediction through technical and public sentiment analysis. http://kienwei.mit.edu/sites/default/.les/images/ stock- market- prediction.pdf . Takeuchi, L., & Lee, Y.-Y. (2013). Applying deep learning to enhance momentum trad- ing strategies in stocks. Working paper, Stanford University. Tieleman, T. , & Hinton, G. (2012). Lecture 6.5-rmsprop: Divide the gradient by a run- ning average of its recent magnitude. COURSERA: Neural Networks for Machine Learning, 4 (2), 26.30 . Van Der Walt, S. , Colbert, S. C. , & Varoquaux, G. (2011). The numpy array: a structure for e.cient numerical computation. Computing in Science & Engineering, 13 (2), 22.30 . Xiong, R., Nichols, E. P., & Shen, Y. (2015). Deep learning stock volatility with Google domestic trends. arXiv e-prints arXiv: 1512.04916 . 
