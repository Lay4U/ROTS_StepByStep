{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "_active": false,
    "_cell_guid": "05ecc7a7-949b-dcd5-242e-9f80c8e3aec5"
   },
   "source": [
    "Stock Prediction using machine learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_active": false,
    "_cell_guid": "ab56a2a6-a048-5c9d-45ac-02d019737df5"
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load in \n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import style\n",
    "import datetime as dt1\n",
    "from datetime import datetime as dt\n",
    "\n",
    "\n",
    "\n",
    "# Input data files are available in the \"../input/\" directory.\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
    "\n",
    "from subprocess import check_output\n",
    "# print(check_output([\"ls\", \"../input\"]).decode(\"utf8\"))\n",
    "\n",
    "# Any results you write to the current directory are saved as output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "_active": false,
    "_cell_guid": "60febda3-80c3-fb4c-bb15-ba94bbe86586"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            Date    Open    High     Low   Close  Volume\n",
      "9056  1985/01/09  143.26  143.26  143.26  143.26   33717\n",
      "9057  1985/01/08  145.39  145.39  145.39  145.39   43849\n",
      "9058  1985/01/07  145.51  145.51  145.51  145.51   47277\n",
      "9059  1985/01/05  141.79  141.79  141.79  141.79   16992\n",
      "9060  1985/01/04  139.53  139.53  139.53  139.53    7411\n"
     ]
    }
   ],
   "source": [
    "df=pd.read_csv('kospi3.csv')\n",
    "# df.tail()\n",
    "# df=df.loc[df['symbol'] == 'CSCO']\n",
    "# df['Date'] = pd.to_datetime(df.Date,format='%Y-%m-%d')\n",
    "print(df.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "_active": false,
    "_cell_guid": "5227f185-e902-4e15-95e9-429cc135d2cf"
   },
   "outputs": [],
   "source": [
    "from sklearn import preprocessing, model_selection, svm\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "_active": false,
    "_cell_guid": "12960c79-6b3e-8860-2bc4-3f5095e94627"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "91\n",
      "         Date     Open     High      Low    Close  Volume    label\n",
      "0  2019/02/01  2211.93  2218.78  2205.94  2205.94  197489  2303.01\n",
      "1  2019/01/31  2222.88  2222.88  2201.22  2204.85  545247  2318.25\n",
      "2  2019/01/30  2183.49  2206.20  2177.88  2206.20  480390  2286.23\n",
      "3  2019/01/29  2172.83  2183.36  2162.53  2183.36  552586  2282.92\n",
      "4  2019/01/28  2184.41  2188.15  2169.17  2177.30  371618  2283.20\n",
      "91\n"
     ]
    }
   ],
   "source": [
    "forecast_col = 'Close'\n",
    "df.fillna(value=-99999, inplace=True)\n",
    "forecast_out = int(math.ceil(0.01 * len(df)))\n",
    "print(forecast_out)\n",
    "df['label'] = df[forecast_col].shift(-forecast_out)\n",
    "print(df.head())\n",
    "print(forecast_out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "_active": false,
    "_cell_guid": "9454b817-ef4a-5bb7-7966-b1fd3a81e915"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-1.55714144 -1.56291928 -1.55260712 -1.55712028 -0.96360289 -1.52792092]\n",
      " [-1.55680727 -1.56258616 -1.55227119 -1.55678591 -0.97904936 -1.52763394]\n",
      " [-1.5560912  -1.56187232 -1.55155134 -1.55606942 -0.95406956 -1.52696431]\n",
      " [-1.55422942 -1.56001634 -1.54967972 -1.55420654 -0.92961301 -1.5262628 ]\n",
      " [-1.55289276 -1.55868385 -1.548336   -1.55286908 -0.94353227 -1.52704403]\n",
      " [-1.55368839 -1.559477   -1.54913584 -1.55366519 -0.95689425 -1.52723535]\n",
      " [-1.55220851 -1.55800174 -1.54764814 -1.55218443 -0.95585626 -1.52643817]\n",
      " [-1.55174704 -1.55754171 -1.54718424 -1.55172269 -0.94742473 -1.52554534]\n",
      " [-1.55300415 -1.55879489 -1.54844798 -1.55298054 -0.95423122 -1.52570477]\n",
      " [-1.55359291 -1.55938182 -1.54903985 -1.55356965 -0.94512329 -1.52473222]\n",
      " [-1.55392708 -1.55971494 -1.54937579 -1.55390402 -0.92372115 -1.52529024]\n",
      " [-1.55467498 -1.56046051 -1.55012763 -1.55465235 -0.95802583 -1.52436552]\n",
      " [-1.55477045 -1.56055569 -1.55022361 -1.55474789 -0.97136654 -1.52398287]\n",
      " [-1.55572521 -1.56150747 -1.55118341 -1.55570321 -0.98628125 -1.52323353]\n",
      " [-1.5557093  -1.56149161 -1.55116742 -1.55568729 -0.96321578 -1.52495543]\n",
      " [-1.55601164 -1.561793   -1.55147135 -1.55598981 -0.98068291 -1.52229286]\n",
      " [-1.55618668 -1.5619675  -1.55164732 -1.55616495 -0.9346328  -1.52245229]\n",
      " [-1.55663223 -1.56241166 -1.55209522 -1.55661077 -0.97319153 -1.52227692]\n",
      " [-1.557221   -1.56299859 -1.5526871  -1.55719989 -0.98891451 -1.52568883]\n",
      " [-1.55682319 -1.56260202 -1.55228719 -1.55680183 -0.97681598 -1.52565694]\n",
      " [-1.55679136 -1.56257029 -1.55225519 -1.55676999 -0.9516958  -1.52540185]\n",
      " [-1.55788934 -1.56366484 -1.55335896 -1.55786861 -0.9734808  -1.52760205]\n",
      " [-1.55706188 -1.56283996 -1.55252714 -1.55704067 -0.96890344 -1.5273629 ]\n",
      " [-1.55553426 -1.56131711 -1.55099145 -1.55551215 -0.9720642  -1.52812819]\n",
      " [-1.55518418 -1.56096813 -1.55063952 -1.55516186 -0.97265552 -1.52859055]\n",
      " [-1.55660041 -1.56237994 -1.55206323 -1.55657893 -0.96575119 -1.52862244]\n",
      " [-1.55645719 -1.56223717 -1.55191926 -1.55643563 -0.96667432 -1.52924423]\n",
      " [-1.55868497 -1.56445799 -1.5541588  -1.55866472 -0.95941265 -1.52921235]\n",
      " [-1.55860541 -1.56437868 -1.55407882 -1.55858511 -0.98306944 -1.52933989]\n",
      " [-1.55878044 -1.56455317 -1.55425478 -1.55876025 -0.97981934 -1.5294515 ]\n",
      " [-1.55830306 -1.56407728 -1.55377488 -1.55828259 -0.98672792 -1.52913263]\n",
      " [-1.55787342 -1.56364898 -1.55334297 -1.55785269 -0.97054976 -1.52887753]\n",
      " [-1.55723692 -1.56301446 -1.5527031  -1.55721581 -0.94503821 -1.52814413]\n",
      " [-1.55664815 -1.56242753 -1.55211122 -1.55662669 -0.93302051 -1.52895725]\n",
      " [-1.55472271 -1.5605081  -1.55017562 -1.55470012 -0.93067227 -1.53095019]\n",
      " [-1.55480228 -1.56058741 -1.5502556  -1.55477973 -0.97443371 -1.53184303]\n",
      " [-1.55520009 -1.56098399 -1.55065552 -1.55517778 -0.95687724 -1.53134878]\n",
      " [-1.55421351 -1.56000048 -1.54966373 -1.55419061 -0.94195402 -1.53074292]\n",
      " [-1.55217669 -1.55797001 -1.54761615 -1.55215259 -0.92161114 -1.53029651]\n",
      " [-1.55284502 -1.55863626 -1.54828801 -1.55282132 -0.94558698 -1.53028056]\n",
      " [-1.55286093 -1.55865212 -1.54830401 -1.55283724 -0.95475446 -1.52847894]\n",
      " [-1.55274954 -1.55854108 -1.54819203 -1.55272578 -0.98026602 -1.5274745 ]\n",
      " [-1.55177887 -1.55757343 -1.54721623 -1.55175454 -0.96441967 -1.52658167]\n",
      " [-1.55195391 -1.55774793 -1.54739219 -1.55192968 -0.94950496 -1.52717158]\n",
      " [-1.55230399 -1.55809691 -1.54774412 -1.55227997 -0.94061399 -1.5278412 ]\n",
      " [-1.5506809  -1.55647888 -1.54611246 -1.55065591 -0.94301328 -1.52817602]\n",
      " [-1.54926467 -1.55506707 -1.54468875 -1.54923885 -0.93718097 -1.52776149]\n",
      " [-1.54853269 -1.55433737 -1.5439529  -1.54850643 -0.87557378 -1.52830357]\n",
      " [-1.55002848 -1.5558285  -1.54545659 -1.55000311 -0.94076714 -1.52844706]\n",
      " [-1.54953518 -1.55533674 -1.5449607  -1.54950952 -0.8513427  -1.52801658]\n",
      " [-1.55220851 -1.55800174 -1.54764814 -1.55218443 -0.92617149 -1.53032839]\n",
      " [-1.55201756 -1.55781138 -1.54745618 -1.55199337 -0.87396575 -1.52988197]\n",
      " [-1.55387934 -1.55966736 -1.5493278  -1.55385625 -0.90607534 -1.52793687]\n",
      " [-1.55768247 -1.56345862 -1.55315101 -1.55766163 -0.96309666 -1.52876593]\n",
      " [-1.55879636 -1.56456904 -1.55427078 -1.55877617 -0.9858686  -1.52737884]\n",
      " [-1.5589714  -1.56474353 -1.55444674 -1.55895131 -0.96829937 -1.52734695]\n",
      " [-1.55919417 -1.56496561 -1.55467069 -1.55917422 -0.96841423 -1.52795281]\n",
      " [-1.55991024 -1.56567945 -1.55539055 -1.55989072 -0.97186852 -1.52605553]\n",
      " [-1.5597352  -1.56550496 -1.55521458 -1.55971557 -0.98089136 -1.52506703]\n",
      " [-1.55892366 -1.56469594 -1.55439875 -1.55890355 -0.97926632 -1.5261193 ]\n",
      " [-1.55916235 -1.56493389 -1.5546387  -1.55914238 -0.97003077 -1.52503514]\n",
      " [-1.5597352  -1.56550496 -1.55521458 -1.55971557 -0.9721663  -1.52519458]\n",
      " [-1.56062631 -1.56639329 -1.5561104  -1.56060721 -0.97756895 -1.52420608]\n",
      " [-1.55979886 -1.56556841 -1.55527857 -1.55977926 -0.96606599 -1.52442929]\n",
      " [-1.56043536 -1.56620293 -1.55591844 -1.56041615 -0.9799895  -1.52474816]\n",
      " [-1.5604831  -1.56625052 -1.55596643 -1.56046391 -0.95337615 -1.52218125]\n",
      " [-1.56118326 -1.56694849 -1.55667028 -1.56116448 -0.94144779 -1.52160729]\n",
      " [-1.56180385 -1.56756715 -1.55729415 -1.56178544 -0.97264701 -1.52151163]\n",
      " [-1.56177203 -1.56753543 -1.55726216 -1.5617536  -0.96598091 -1.52299437]\n",
      " [-1.56344286 -1.56920104 -1.55894181 -1.56342542 -0.98118915 -1.52324947]\n",
      " [-1.56269496 -1.56845548 -1.55818997 -1.56267708 -0.99125424 -1.52312192]\n",
      " [-1.56207437 -1.56783682 -1.5575661  -1.56205612 -0.97411891 -1.52198993]\n",
      " [-1.56111961 -1.56688504 -1.55660629 -1.56110079 -0.97585882 -1.52175078]\n",
      " [-1.56159699 -1.56736093 -1.5570862  -1.56157846 -0.98184427 -1.52066662]\n",
      " [-1.56151742 -1.56728162 -1.55700621 -1.56149885 -0.97838147 -1.52015643]\n",
      " [-1.56113552 -1.5669009  -1.55662229 -1.56111672 -0.98376285 -1.5212087 ]\n",
      " [-1.56124691 -1.56701194 -1.55673427 -1.56122817 -0.98370329 -1.52198993]\n",
      " [-1.56064223 -1.56640915 -1.55612639 -1.56062313 -0.9740551  -1.52234069]\n",
      " [-1.55968747 -1.56545737 -1.55516659 -1.55966781 -0.97196211 -1.5225639 ]\n",
      " [-1.55860541 -1.56437868 -1.55407882 -1.55858511 -0.96689553 -1.52189427]\n",
      " [-1.55989433 -1.56566359 -1.55537455 -1.55987479 -0.97621191 -1.51988539]\n",
      " [-1.55965564 -1.56542564 -1.5551346  -1.55963596 -0.98316728 -1.52033181]\n",
      " [-1.55936921 -1.56514011 -1.55484666 -1.55934937 -0.96968193 -1.52063473]\n",
      " [-1.56000572 -1.56577463 -1.55548653 -1.55998625 -0.95722182 -1.51808377]\n",
      " [-1.55940104 -1.56517183 -1.55487865 -1.55938121 -0.97564186 -1.51966218]\n",
      " [-1.55921009 -1.56498148 -1.55468669 -1.55919015 -0.9747868  -1.51668074]\n",
      " [-1.55906687 -1.56483871 -1.55454272 -1.55904685 -0.96981806 -1.51456025]\n",
      " [-1.55881227 -1.5645849  -1.55428677 -1.55879209 -0.97418698 -1.51116428]\n",
      " [-1.55831898 -1.56409314 -1.55379088 -1.55829851 -0.97365947 -1.51097296]\n",
      " [-1.55795299 -1.56372829 -1.55342295 -1.5579323  -0.95933608 -1.51690395]\n",
      " [-1.55776203 -1.56353794 -1.55323099 -1.55774124 -0.9680739  -1.52050719]]\n"
     ]
    }
   ],
   "source": [
    "#X = np.array(df.drop(['label'], 1))\n",
    "\n",
    "X=np.array(df.drop(['Date'], axis=1))\n",
    "# print(X)\n",
    "X = preprocessing.scale(X)\n",
    "#print(X)\n",
    "X_lately = X[-forecast_out:]\n",
    "\n",
    "# X = X[:-forecast_out]\n",
    "df.dropna(inplace=True)\n",
    "y = np.array(df['label'])\n",
    "X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2)\n",
    "print(X_lately)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "_active": false,
    "_cell_guid": "6c4ab6c7-5c85-01d8-96b4-50fe7bac6712"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n"
     ]
    }
   ],
   "source": [
    "clf = LinearRegression(n_jobs=-1)\n",
    "clf.fit(X_train, y_train)\n",
    "confidence = clf.score(X_test, y_test)\n",
    "print(confidence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "_active": true,
    "_cell_guid": "63360ae6-13ec-13c7-3249-7294f26863d6"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[134.88 135.06 135.48 135.92 135.43 135.31 135.81 136.37 136.27 136.88\n",
      " 136.53 137.11 137.35 137.82 136.74 138.41 138.31 138.42 136.28 136.3\n",
      " 136.46 135.08 135.23 134.75 134.46 134.44 134.05 134.07 133.99 133.92\n",
      " 134.12 134.28 134.74 134.23 132.98 132.42 132.73 133.11 133.39 133.4\n",
      " 134.53 135.16 135.72 135.35 134.93 134.72 134.98 134.64 134.55 134.82\n",
      " 133.37 133.65 134.87 134.35 135.22 135.24 134.86 136.05 136.67 136.01\n",
      " 136.69 136.59 137.21 137.07 136.87 138.48 138.84 138.9  137.97 137.81\n",
      " 137.89 138.6  138.75 139.43 139.75 139.09 138.6  138.38 138.24 138.66\n",
      " 139.92 139.64 139.45 141.05 140.06 141.93 143.26 145.39 145.51 141.79\n",
      " 139.53]\n",
      "nan\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "strptime() argument 1 must be str, not float",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-11-6ab8f74e0b0c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mlast_date\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0miloc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDate\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlast_date\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mlast_date\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstrptime\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlast_date\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'%Y/%m/%d'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mlast_unix\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlast_date\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mone_day\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m86400\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: strptime() argument 1 must be str, not float"
     ]
    }
   ],
   "source": [
    "forecast_set = clf.predict(X_lately)\n",
    "print(forecast_set)\n",
    "df['Forecast'] = np.nan\n",
    "last_date = df.iloc[-1].Date\n",
    "print(last_date)\n",
    "last_date=dt.strptime(last_date, '%Y/%m/%d').timestamp()\n",
    "last_unix = last_date\n",
    "one_day = 86400\n",
    "next_unix = last_unix + one_day\n",
    "\n",
    "for i in forecast_set:\n",
    "    next_date = dt.fromtimestamp(next_unix)\n",
    "    next_unix += 86400\n",
    "    df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]\n",
    "print(df.head())\n",
    "df['Close'].plot()\n",
    "df['Forecast'].plot()\n",
    "#plt.legend(loc=4)\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Price')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
